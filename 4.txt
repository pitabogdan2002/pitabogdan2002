.data
	matrix:. space 1600
	marix2:. space 1600
	columnindex:.space 4
	lineindex:.space 4
	n: .space 4
	m: .space 4
	nr: .space 4
	p:. space 1
	index: .space 4
	res: .space 4 
	chDelim: .asciz " "
	formatScanf: .asciz"%d"
	formatSir:. asciz "%s"
	formatPrint: .asciz"%d "
	
.text

.global main

main:

	pushl $nume
	pushl $formatsir
	call scanf
	popl %ebx
	popl %ebx

	movl $nume, %edi
	xorl %ecx, %ecx
	movb (%edi, %ecx, 1), %al 
	movb %al,p
	
 
	pushl $n
	pushl $formatScanf
	call scanf
	popl %ebx
	popl %ebx

	pushl $m
	pushl $formatScanf
	call scanf
	popl %ebx
	popl %ebx

	movl n,nr
	addl m,nr
	
	lea matrix,%edi
	movl $0, %ecx
ef_for:	
	cmp %ecx, nr
	je et_afis_matrice
	
	pushl $x
	pushl $formatScanf
	call scanf
	popl %ebx
	popl %ebx
	
	movl x,(%edi, %ecx, 4)
	incl %ecx
	jmp et_for
	
	pushl $m
	pushl $formatScanf
	call scanf
	popl %ebx
	popl %ebx
	

	pushl $cuvant
	pushl $formatSir
	call scanf
	popl %ebx
	popl %ebx

	pushl $cuvant, %edi
	xorl %ecx, %ecx
	movb (%edi, %ecx, 1), %al 
	cmp $114, %al
	jne et_let

	lev matrix, %edi
	lev matrix2, %esi
	movl $0,indexcoloane
	movl $0,indexlinii

for_linii:
	cmp indexlinii,n
	je et_afisare
for_coloane:
	cmp indexcoloane, m
	je for_linii
	movl m, %ebx
	mull 
	add
	sub %ebx
	movl (%edi, indexlinii, 
		

et_let:
	pushl $cuvant
	pushl $formatSir
	call scanf
	popl %ebx
	popl %ebx
	
	movl $cuvant, %edi
	xorl %ecx, %ecx
	movb (%edi, %ecx, 1), %al 
	movb %al,r
	cmp r,p
	je et_numar
	pushl $cuvant
	jmp et_operatie

et_numar:
	pushl $cuvant
	pushl $formatSir
	call scanf
	popl %ebx
	popl %ebx
	pushl $cuvant

et_operatie:
	movl $cuvant, %edi
	xorl %ecx, %ecx
	movb (%edi, %ecx, 1), %al 
	cmp $97, %al
	jne et_sub
	
	popl%, ebx
	lea matrix,%edi
	movl $0,index
	et_for1:
		cmp index, nr
		je et_afis_matrice
		
		movl (%edi, index, 4),%eax
		addl %ebx, %eax
		movl %eax, movl (%edi, index, 4)
		incl index
		jmp et_for1

et_sub:
	cmp $115, %al
	jne et_mul
	
	popl%, ebx
	lea matrix,%edi
	movl $0,index
	et_for2:
		cmp index, nr
		je et_afis_matrice
		
		movl (%edi, index, 4),%eax
		subl %ebx, %eax
		movl %eax, movl (%edi, index, 4)
		incl index
		jmp et_for2

et_mul:
	cmp $109, %al
	jne et_div
	
	popl%, ebx
	lea matrix,%edi
	movl $0,index
	et_for3:
		cmp index, nr
		je et_afis_matrice
		
		movl (%edi, index, 4),%eax
		mull %ebx
		cdq
		imovl %eax, movl (%edi, index, 4)
		incl index
		jmp et_for3

et_div:
	popl%, ebx
	lea matrix,%edi
	movl $0,index
	et_for4:
		cmp index, nr
		je et_afis_matrice
		
		movl (%edi, index, 4),%eax
		movl $0, %edx
		cdq
		idivl %ebx
		movl %eax, movl (%edi, index, 4)
		incl index
		jmp et_for4
	
	
	
	
	
et_afis_matrice:
	lea matrix, %edi
	movl $0, %ecx
cont:
	cmp %ecx,nr
	je et_exit
	movl (%edi, %ecx, 4), %ebx
	
	pushl %ebx
	pushl $formatPrintf
	call printf
	popl %ebx
	popl %ebx

	pushl $0
	call fflush
	popl %ebx
			
	incl %ecx
	je cont


	
et_exit:
	movl $1, %eax
	xorl %ebx, %ebx
	int $0x80